--- gst-plugins-base-0.10.36/gst-libs/gst/pbutils/codec-utils.c.orig	2011-12-30 05:29:13.000000000 -0800
+++ gst-plugins-base-0.10.36/gst-libs/gst/pbutils/codec-utils.c	2014-08-12 17:32:03.226133180 -0700
@@ -621,6 +621,212 @@ gst_codec_utils_h264_caps_set_level_and_
   return (level != NULL && profile != NULL);
 }
 
+
+/**
+ * gst_codec_utils_h265_get_level:
+ * @profile_tier_level: Pointer to the profile_tier_level structure
+ *   for the stream
+ * @len: Length of the data available in @profile_tier_level.
+ *
+ * Converts the level indication (general_level_idc) in the stream's
+ * profile_tier_level structure into a string. The profiel_tier_level is
+ * expected to have the same format as for gst_codec_utils_h264_get_profile().
+ *
+ * Returns: The level as a const string, or %NULL if there is an error.
+ *
+ * Since 1.4
+ */
+const gchar *
+gst_codec_utils_h265_get_level (const guint8 * profile_tier_level, guint len)
+{
+  g_return_val_if_fail (profile_tier_level != NULL, NULL);
+
+  if (len < 12)
+    return NULL;
+
+  GST_MEMDUMP ("ProfileTierLevel", profile_tier_level, len);
+
+  if (profile_tier_level[11] % 30 == 0)
+    return digit_to_string (profile_tier_level[11] / 30);
+  else {
+    switch (profile_tier_level[11]) {
+      case 63:
+        return "2.1";
+        break;
+      case 93:
+        return "3.1";
+        break;
+      case 123:
+        return "4.1";
+        break;
+      case 153:
+        return "5.1";
+        break;
+      case 156:
+        return "5.2";
+        break;
+      case 183:
+        return "6.1";
+        break;
+      case 186:
+        return "6.2";
+        break;
+      default:
+        return NULL;
+    }
+  }
+}
+/**
+ * gst_codec_utils_h265_get_tier:
+ * @profile_tier_level: Pointer to the profile_tier_level structure
+ *   for the stream.
+ * @len: Length of the data available in @profile_tier_level.
+ *
+ * Converts the tier indication (general_tier_flag) in the stream's
+ * profile_tier_level structure into a string. The profile_tier_level
+ * is expected to have the same format as for gst_codec_utils_h264_get_profile
+().
+ *
+ * Returns: The tier as a const string, or %NULL if there is an error.
+ *
+ * Since 1.4
+ */
+const gchar *
+gst_codec_utils_h265_get_tier (const guint8 * profile_tier_level, guint len)
+{
+  const gchar *tier = NULL;
+  gint tier_flag = 0;
+
+  g_return_val_if_fail (profile_tier_level != NULL, NULL);
+
+  if (len < 1)
+    return NULL;
+
+  GST_MEMDUMP ("ProfileTierLevel", profile_tier_level, len);
+
+  tier_flag = (profile_tier_level[0] & 0x20) >> 5;
+
+  if (tier_flag)
+    tier = "high";
+  else
+    tier = "main";
+
+  return tier;
+}
+
+/**
+ * gst_codec_utils_h265_get_profile:
+ * @profile_tier_level: Pointer to the profile_tier_level
+ *   structure for the stream.
+ * @len: Length of the data available in @profile_tier_level
+ *
+ * Converts the profile indication (general_profile_idc) in the stream's
+ * profile_level_tier structure into a string. The profile_tier_level is
+ * expected to have the following format, as defined in the H.265
+ * specification. The profile_tier_level is viewed as a bitstream here,
+ * with bit 0 being the most significant bit of the first byte.
+ *
+ * <itemizedlist>
+ * <listitem><para>Bit 0:1   - general_profile_space</para></listitem>
+ * <listitem><para>Bit 2     - general_tier_flag</para></listitem>
+ * <listitem><para>Bit 3:7   - general_profile_idc</para></listitem>
+ * <listitem><para>Bit 8:39  - gernal_profile_compatibility_flags</para></
+listitem>
+ * <listitem><para>Bit 40    - general_progressive_source_flag</para></
+listitem>
+ * <listitem><para>Bit 41    - general_interlaced_source_flag</para></listitem>
+ * <listitem><para>Bit 42    - general_non_packed_constraint_flag</para></
+listitem>
+ * <listitem><para>Bit 43    - general_frame_only_constraint_flag</para></
+listitem>
+ * <listitem><para>Bit 44:87 - general_reserved_zero_44bits</para></listitem>
+ * <listitem><para>Bit 88:95 - general_level_idc</para></listitem>
+ * </itemizedlist>
+ *
+ * Returns: The profile as a const string, or %NULL if there is an error.
+ *
+ * Since 1.4
+ */
+const gchar *
+gst_codec_utils_h265_get_profile (const guint8 * profile_tier_level, guint len)
+{
+  const gchar *profile = NULL;
+  gint gpcf1 = 0, gpcf2 = 0, gpcf3 = 0;
+  gint profile_idc;
+
+  g_return_val_if_fail (profile_tier_level != NULL, NULL);
+
+  if (len < 2)
+    return NULL;
+
+  GST_MEMDUMP ("ProfileTierLevel", profile_tier_level, len);
+
+  profile_idc = (profile_tier_level[0] & 0x1f);
+
+  gpcf1 = (profile_tier_level[1] & 0x40) >> 6;
+  gpcf2 = (profile_tier_level[1] & 0x20) >> 5;
+  gpcf3 = (profile_tier_level[1] & 0x10) >> 4;
+
+  if (profile_idc == 1 || gpcf1)
+    profile = "main";
+  else if (profile_idc == 2 || gpcf2)
+    profile = "main-10";
+  else if (profile_idc == 3 || gpcf3)
+    profile = "main-still-picture";
+  else
+    profile = NULL;
+
+  return profile;
+}
+
+
+/**
+ * gst_codec_utils_h265_caps_set_level_tier_and_profile:
+ * @caps: the #GstCaps to which the level, tier and profile are to be added
+ * @profile_tier_level: Pointer to the profile_tier_level struct
+ * @len: Length of the data available in @profile_tier_level.
+ *
+ * Sets the level, tier and profile in @caps if it can be determined from
+ * @profile_tier_level. See gst_codec_utils_h265_get_level(),
+ * gst_codec_utils_h265_get_tier() and gst_codec_utils_h265_get_profile()
+ * for more details on the parameters.
+ *
+ * Returns: %TRUE if the level, tier, profile could be set, %FALSE otherwise.
+ *
+ * Since 1.4
+ */
+gboolean
+gst_codec_utils_h265_caps_set_level_tier_and_profile (GstCaps * caps,
+    const guint8 * profile_tier_level, guint len)
+{
+  const gchar *level, *tier, *profile;
+
+  g_return_val_if_fail (GST_IS_CAPS (caps), FALSE);
+  g_return_val_if_fail (GST_CAPS_IS_SIMPLE (caps), FALSE);
+  g_return_val_if_fail (GST_SIMPLE_CAPS_HAS_NAME (caps, "video/x-h265"), FALSE
+);
+  g_return_val_if_fail (profile_tier_level != NULL, FALSE);
+
+  level = gst_codec_utils_h265_get_level (profile_tier_level, len);
+  if (level != NULL)
+    gst_caps_set_simple (caps, "level", G_TYPE_STRING, level, NULL);
+
+  tier = gst_codec_utils_h265_get_tier (profile_tier_level, len);
+  if (tier != NULL)
+    gst_caps_set_simple (caps, "tier", G_TYPE_STRING, tier, NULL);
+
+  profile = gst_codec_utils_h265_get_profile (profile_tier_level, len);
+  if (profile != NULL)
+    gst_caps_set_simple (caps, "profile", G_TYPE_STRING, profile, NULL);
+
+  GST_LOG ("profile : %s", (profile) ? profile : "---");
+  GST_LOG ("tier    : %s", (tier) ? tier : "---");
+  GST_LOG ("level   : %s", (level) ? level : "---");
+
+  return (level != NULL && tier != NULL && profile != NULL);
+}
+
+
 /**
  * gst_codec_utils_mpeg4video_get_profile:
  * @vis_obj_seq: Pointer to the visual object sequence for the stream.
